server:
  port: 8082 # 端口
spring:
  application:
    name: cart-service # 应用名称
  profiles:
    active: dev # 指定环境，默认加载 default 环境
  datasource:
    url: jdbc:mysql://${hm.db.host}:${hm.db.port}/hm-cart?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: ${hm.db.pw}
  cloud:
    consul:
      # Consul 服务器地址
      host: localhost
      port: 8500
      # 服务发现相关配置
      discovery:
        register: true
        hostname: ${spring.cloud.client.ip-address}   # 是否需要注册
        instance-id: ${spring.application.name}:${spring.cloud.consul.discovery.hostname}:${server.port}    # 注册实例 id（必须唯一）
        service-name: ${spring.application.name}      # 服务名称
        port: ${server.port}                          # 服务端口
        prefer-ip-address: true                       # 是否使用 ip 地址注册
        ip-address: ${spring.cloud.client.ip-address} # 服务请求 ip
      # 配置中心相关配置
      config:
        # 是否启用配置中心，默认值 true 开启
        enabled: true
        # 设置配置的基本文件夹，默认值 config 可以理解为配置文件所在的最外层文件夹
        prefixes:
          - config
        # 设置应用的文件夹名称，默认值 application 一般建议设置为微服务应用名称
        default-context: cartService
        # 配置环境分隔符，默认值 "," 和 default-context 配置项搭配
        # 例如应用 orderService 分别有环境 default、dev、test、prod
        # 只需在 config 文件夹下创建 cartService、cartService-dev、cartService-test、cartService-prod 文件夹即可
        profile-separator: '-'
        # 指定配置格式为 yaml
        format: YAML
        # Consul 的 Key/Values 中的 Key，Value 对应整个配置文件
        data-key: cartServiceConfig
        # 以上配置可以理解为：加载 config/orderService/ 文件夹下 Key 为 orderServiceConfig 的 Value 对应的配置信息
        watch:
          # 是否开启自动刷新，默认值 true 开启
          enabled: true
          # 刷新频率，单位：毫秒，默认值 1000
          delay: 1000
  # actuator放开端口
  management:
    endpoints:
      web:
        exposure:
          include: health
    endpoint:
      health:
        show-details: always
mybatis-plus:
  configuration:
    default-enum-type-handler: com.baomidou.mybatisplus.core.handlers.MybatisEnumTypeHandler
  global-config:
    db-config:
      update-strategy: not_null
      id-type: auto
logging:
  level:
    com.hmall: debug
  pattern:
    dateformat: HH:mm:ss:SSS
  file:
    path: "logs/${spring.application.name}"
knife4j:
  enable: true
  openapi:
    title: 黑马商城购物车管理接口文档
    description: "黑马商城购物车管理接口文档"
    email: zhanghuyi@itcast.cn
    concat: 虎哥
    url: https://www.itcast.cn
    version: v1.0.0
    group:
      default:
        group-name: default
        api-rule: package
        api-rule-resources:
          - com.hmall.cart.controller # Swagger扫描到Controller,会把Controller接口信息作为接口文档信息
feign:
  okhttp:
    enabled: true # 开启OKHttp连接池支持
  circuitbreaker:
    enabled: true
resilience4j:
  retry: # 重试机制
    instances: # 定义多个重试策略
      retryApi: # 第一个重试策略名称，可以随便命名
        max-attempts: 5
        wait-duration: 1s
  circuitbreaker: # 断路器
    instances: # 定义多个断路器实例
      cbApi: # 第一个断路器名称 可以随便命名
        register-health-indicator: true # 是否将断路器的状态注册为健康指标
        sliding-window-size: 10 # 计算失败率的滑动窗口大小为10 最近10次调用失败
        permitted-number-of-calls-in-half-open-state: 3 # 半开状态尝试
        sliding-window-type: TIME_BASED # 滑动窗口的类型基于时间
        minimum-number-of-calls: 5 # 当短路器开始计算失败率之前 至少需要5次调用
        wait-duration-in-open-state: 5s # 当断路器打开后（服务就不可用了），会等待5秒再尝试
        failure-rate-threshold: 20 # 当失败率达到20%的时候，断路器会打开
        event-consumer-buffer-size: 10 # 用于存储断路器相关事件的缓冲区大小
  ratelimiter: # 限流配置 防止过多的请求进来
    instances:
      rlApi:
        limit-for-period: 1 # 在特定的时间内，最大请求数量
        limit-refresh-period: 1s # 每一秒会重置请求次数
        timeout-duration: 100ms # 超时时间 1秒进1个请求